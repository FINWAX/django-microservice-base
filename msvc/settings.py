"""
Django settings for msvc project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import json
from pathlib import Path

from config import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = settings.get("APP_SECRET_KEY", "127.0.0.1")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(settings.get("DEBUG_MODE", default=0))

ALLOWED_HOSTS = settings.get("ALLOWED_HOSTS", "127.0.0.1").split(",")

# Application definition

INSTALLED_APPS = [
    'app.apps.MsvcAppConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'msvc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'msvc.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

db_configs = {
    'pgsql': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': settings.get('DATABASE_NAME', 'msvc'),
        'USER': settings.get('DATABASE_USERNAME', 'root'),
        'PASSWORD': settings.get('DATABASE_PASSWORD', 'password'),
        'HOST': settings.get('DATABASE_HOST', '127.0.0.1'),
        'PORT': settings.get('DATABASE_PORT', 5432),
    },
    'mariadb': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': settings.get('DATABASE_NAME', 'msvc'),
        'USER': settings.get('DATABASE_USERNAME', 'root'),
        'PASSWORD': settings.get('DATABASE_PASSWORD', 'password'),
        'HOST': settings.get('DATABASE_HOST', '127.0.0.1'),
        'PORT': settings.get('DATABASE_PORT', 3306),
    },
    'sqlite3': {
        'ENGINE': "django.db.backends.sqlite3",
        'NAME': BASE_DIR / f'volumes/sqlite/{settings.get('DATABASE_NAME', 'msvc')}.sqlite3',
    }
}
DATABASES = {
    'default': db_configs.get(settings.get('DATABASE_DRIVER', 'sqlite3'), 'sqlite3')
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

cache_configs = {
    "redis": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f"redis://{settings.get('REDIS_HOST', '127.0.0.1')}:{settings.get('REDIS_PORT', '6379')}/{settings.get('REDIS_DB_NUMBER', '0')}",
    },
    "fs": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": BASE_DIR / "volumes/django_cache",
    }
}
CACHES = {
    "default": cache_configs.get(settings.get("CACHE_DRIVER", 'fs'), 'fs')
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

AUTH_INTROSPECTION_URL = settings.get("AUTH_INTROSPECTION_URL", None)
AUTH_DOMAIN = settings.get("AUTH_DOMAIN", None)

FINWAX_PROJECT_ID = settings.get('FINWAX_PROJECT_ID', None)

AUTH_BASIC_CLIENT_ID = settings.get("AUTH_BASIC_CLIENT_ID", None)
AUTH_BASIC_CLIENT_SECRET = settings.get("AUTH_BASIC_CLIENT_SECRET", None)

AUTH_JWT_CLIENT_ID = settings.get("AUTH_JWT_CLIENT_ID", None)
AUTH_JWT_PRIVATE_KEY_FILE_PATH = settings.get("AUTH_JWT_PRIVATE_KEY_FILE_PATH", None)
AUTH_JWT_KEY_ALGORITHM = 'RS256'

AUTH_PAT = settings.get("AUTH_PAT", None)

AUTH_JWT_PRIVATE_KEY_FILE = None
if AUTH_JWT_PRIVATE_KEY_FILE_PATH and Path(AUTH_JWT_PRIVATE_KEY_FILE_PATH).exists():
    with open(AUTH_JWT_PRIVATE_KEY_FILE_PATH, "r") as f:
        AUTH_JWT_PRIVATE_KEY_FILE = json.load(f)

AUTH_TOKEN_INTROSPECTION_PERIOD = settings.get("AUTH_TOKEN_INTROSPECTION_PERIOD", 90)
